// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ExceptionHandlingContract {
    uint public totalSupply;
    mapping(address => uint) public balances;

    constructor(uint initialSupply) {
        totalSupply = initialSupply;
        balances[msg.sender] = initialSupply;
    }

    function transfer(address recipient, uint amount) external {
        require(amount > 0, "Amount must be greater than zero");
        require(balances[msg.sender] >= amount, "Insufficient balance");

        balances[msg.sender] -= amount;
        balances[recipient] += amount;
    }

    function assertExample(uint a, uint b) external pure returns (uint) {
        assert(b != 0);
        return a / b;
    }

    function revertExample() external pure {
        revert("This function always reverts");
    }
}
